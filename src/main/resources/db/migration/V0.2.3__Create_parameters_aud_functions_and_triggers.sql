CREATE TABLE PARAMETERS_AUD (
  EVENT_ID SERIAL NOT NULL PRIMARY KEY UNIQUE,
  EVENT_DATE TIMESTAMP NOT NULL,
  EVENT_TYPE VARCHAR(10) DEFAULT NULL,
  OLD_ID INTEGER,
  NEW_ID INTEGER,
  OLD_NAME VARCHAR(50),
  NEW_NAME VARCHAR(50),
  OLD_VALUE VARCHAR(50),
  NEW_VALUE VARCHAR(50)
);

/* LOG AFTER INSERT */
CREATE OR REPLACE FUNCTION log_parameter_after_insert()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO PARAMETERS_AUD (EVENT_DATE, EVENT_TYPE, NEW_ID, NEW_NAME, NEW_VALUE)
  VALUES (CURRENT_TIMESTAMP, 'INSERT', NEW.ID, NEW.NAME, NEW.VALUE);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER parameter_insert
  AFTER INSERT
  ON PARAMETERS
  FOR EACH ROW
EXECUTE PROCEDURE log_parameter_after_insert();

/* LOG AFTER UPDATE */
CREATE OR REPLACE FUNCTION log_parameter_after_update()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO PARAMETERS_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, NEW_ID, OLD_NAME, NEW_NAME, OLD_VALUE, NEW_VALUE)
  VALUES (CURRENT_TIMESTAMP, 'UPDATE', OLD.ID, NEW.ID, OLD.NAME, NEW.NAME, OLD.VALUE, NEW.VALUE);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER parameter_update
  AFTER UPDATE
  ON PARAMETERS
  FOR EACH ROW
EXECUTE PROCEDURE log_parameter_after_update();

/* LOG AFTER DELETE */
CREATE OR REPLACE FUNCTION log_parameter_after_delete()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO PARAMETERS_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, OLD_NAME, OLD_VALUE)
  VALUES (CURRENT_TIMESTAMP, 'DELETE', OLD.ID, OLD.NAME, OLD.VALUE);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER parameter_delete
  AFTER DELETE
  ON PARAMETERS
  FOR EACH ROW
EXECUTE PROCEDURE log_parameter_after_delete();