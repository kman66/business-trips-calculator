CREATE TABLE COUNTRIES_AUD (
  EVENT_ID SERIAL NOT NULL PRIMARY KEY UNIQUE,
  EVENT_DATE TIMESTAMP NOT NULL,
  EVENT_TYPE VARCHAR(10) DEFAULT NULL,
  OLD_ID INTEGER,
  NEW_ID INTEGER,
  OLD_NAME VARCHAR(100),
  NEW_NAME VARCHAR(100),
  OLD_CURRENCY_ID INTEGER,
  NEW_CURRENCY_ID INTEGER
);

/* LOG AFTER INSERT */
CREATE OR REPLACE FUNCTION log_country_after_insert()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO COUNTRIES_AUD (EVENT_DATE, EVENT_TYPE, NEW_ID, NEW_NAME, NEW_CURRENCY_ID)
  VALUES (CURRENT_TIMESTAMP, 'INSERT', NEW.ID, NEW.NAME, NEW.CURRENCY_ID);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER country_insert
  AFTER INSERT
  ON COUNTRIES
  FOR EACH ROW
EXECUTE PROCEDURE log_country_after_insert();

/* LOG AFTER UPDATE */
CREATE OR REPLACE FUNCTION log_country_after_update()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO COUNTRIES_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, NEW_ID, OLD_NAME, NEW_NAME, OLD_CURRENCY_ID, NEW_CURRENCY_ID)
  VALUES (CURRENT_TIMESTAMP, 'UPDATE', OLD.ID, NEW.ID, OLD.NAME, NEW.NAME, OLD.CURRENCY_ID, NEW.CURRENCY_ID);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER country_update
  AFTER UPDATE
  ON COUNTRIES
  FOR EACH ROW
EXECUTE PROCEDURE log_country_after_update();

/* LOG AFTER DELETE */
CREATE OR REPLACE FUNCTION log_country_after_delete()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO COUNTRIES_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, OLD_NAME, OLD_CURRENCY_ID)
  VALUES (CURRENT_TIMESTAMP, 'DELETE', OLD.ID, OLD.NAME, OLD.CURRENCY_ID);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER country_delete
  AFTER DELETE
  ON COUNTRIES
  FOR EACH ROW
EXECUTE PROCEDURE log_country_after_delete();