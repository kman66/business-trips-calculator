CREATE TABLE CURRENCIES_AUD (
  EVENT_ID SERIAL NOT NULL PRIMARY KEY UNIQUE,
  EVENT_DATE TIMESTAMP NOT NULL,
  EVENT_TYPE VARCHAR(10) DEFAULT NULL,
  OLD_ID INTEGER,
  NEW_ID INTEGER,
  OLD_CODE VARCHAR(50),
  NEW_CODE VARCHAR(50),
  OLD_MID DECIMAL(10,5),
  NEW_MID DECIMAL(10,5)
);

/* LOG AFTER INSERT */
CREATE OR REPLACE FUNCTION log_currency_after_insert()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO CURRENCIES_AUD (EVENT_DATE, EVENT_TYPE, NEW_ID, NEW_CODE, NEW_MID)
  VALUES (CURRENT_TIMESTAMP, 'INSERT', NEW.ID, NEW.CODE, NEW.MID);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER currency_insert
  AFTER INSERT
  ON CURRENCIES
  FOR EACH ROW
EXECUTE PROCEDURE log_currency_after_insert();

/* LOG AFTER UPDATE */
CREATE OR REPLACE FUNCTION log_currency_after_update()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO CURRENCIES_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, NEW_ID, OLD_CODE, NEW_CODE, OLD_MID, NEW_MID)
  VALUES (CURRENT_TIMESTAMP, 'UPDATE', OLD.ID, NEW.ID, OLD.CODE, NEW.CODE, OLD.MID, NEW.MID);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER currency_update
  AFTER UPDATE
  ON CURRENCIES
  FOR EACH ROW
EXECUTE PROCEDURE log_currency_after_update();

/* LOG AFTER DELETE */
CREATE OR REPLACE FUNCTION log_currency_after_delete()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO CURRENCIES_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, OLD_CODE, OLD_MID)
  VALUES (CURRENT_TIMESTAMP, 'DELETE', OLD.ID, OLD.CODE, OLD.MID);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER currency_delete
  AFTER DELETE
  ON CURRENCIES
  FOR EACH ROW
EXECUTE PROCEDURE log_currency_after_delete();