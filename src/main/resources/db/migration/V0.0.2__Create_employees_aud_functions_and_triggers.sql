CREATE TABLE EMPLOYEES_AUD (
  EVENT_ID SERIAL NOT NULL PRIMARY KEY UNIQUE,
  EVENT_DATE TIMESTAMP NOT NULL,
  EVENT_TYPE VARCHAR(10) DEFAULT NULL,
  OLD_ID INTEGER,
  NEW_ID INTEGER,
  OLD_FORENAME VARCHAR(50),
  NEW_FORENAME VARCHAR(50),
  OLD_SURNAME VARCHAR(50),
  NEW_SURNAME VARCHAR(50)
);

/* LOG AFTER INSERT */
CREATE OR REPLACE FUNCTION log_employee_after_insert()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO EMPLOYEES_AUD (EVENT_DATE, EVENT_TYPE, NEW_ID, NEW_FORENAME, NEW_SURNAME)
  VALUES (CURRENT_TIMESTAMP, 'INSERT', NEW.ID, NEW.FORENAME, NEW.SURNAME);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER employee_insert
  AFTER INSERT
  ON EMPLOYEES
  FOR EACH ROW
EXECUTE PROCEDURE log_employee_after_insert();

/* LOG AFTER UPDATE */
CREATE OR REPLACE FUNCTION log_employee_after_update()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO EMPLOYEES_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, NEW_ID, OLD_FORENAME, NEW_FORENAME, OLD_SURNAME, NEW_SURNAME)
  VALUES (CURRENT_TIMESTAMP, 'UPDATE', OLD.ID, NEW.ID, OLD.FORENAME, NEW.FORENAME, OLD.SURNAME, NEW.SURNAME);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER employee_update
  AFTER UPDATE
  ON EMPLOYEES
  FOR EACH ROW
EXECUTE PROCEDURE log_employee_after_update();

/* LOG AFTER DELETE */
CREATE OR REPLACE FUNCTION log_employee_after_delete()
  RETURNS TRIGGER AS
$BODY$
BEGIN
  INSERT INTO EMPLOYEES_AUD (EVENT_DATE, EVENT_TYPE, OLD_ID, OLD_FORENAME, OLD_SURNAME)
  VALUES (CURRENT_TIMESTAMP, 'DELETE', OLD.ID, OLD.FORENAME, OLD.SURNAME);
  RETURN NEW;
END;
$BODY$
LANGUAGE plpgsql;

CREATE TRIGGER employee_delete
  AFTER DELETE
  ON EMPLOYEES
  FOR EACH ROW
EXECUTE PROCEDURE log_employee_after_delete();